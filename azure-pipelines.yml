# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  - '*'
pool:
    vmImage: 'ubuntu-18.04'
stages:
  - stage: 'Provision'
    displayName: "Provision single Node RKE Cluster"
    jobs:
    - job: 'InstallTerraform'
      displayName: 'Install Terraform'
      variables:
      - group: TerraformServicePrincipal
      steps:
        - script: |
           # Exit when any command returns a failure status.
           set -e
           terraform version
           # Write terraform.tfvars.
           echo 'publickey = "'$(publickey)'"' | tee terraform.tfvars
           # Write backend.tfvars.
           echo 'resource_group_name = "'$(ResourceGroupName)'"' | tee backend.tfvars
           echo 'storage_account_name = "'$(StorageAccountName)'"' | tee -a backend.tfvars
           echo 'container_name = "'$(ContainerName)'"' | tee -a backend.tfvars
           echo 'key = "'$(ContainerKey)'"' | tee -a backend.tfvars
   
           # Initialize Terraform.
           terraform init -input=false -backend-config="backend.tfvars"
           # Apply the Terraform plan.
           terraform apply -input=false -auto-approve


          name: 'RunTerraform'
          displayName: 'Run Terraform'
          env:
              ARM_CLIENT_ID: $(ARM_CLIENT_ID)
              ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
              ARM_TENANT_ID: $(ARM_TENANT_ID)
              ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
     
        - task: PublishPipelineArtifact@1
          inputs:
             targetPath: $(System.DefaultWorkingDirectory)/kube_config_cluster.yml
             artifactName: kubeconfig


